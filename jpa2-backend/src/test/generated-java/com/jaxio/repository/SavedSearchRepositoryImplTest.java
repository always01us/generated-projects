/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/service/ServiceImplTest.e.vm.java
 */
package com.jaxio.repository;

import static org.fest.assertions.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import javax.persistence.NonUniqueResultException;
import javax.persistence.NoResultException;

import org.junit.Before;
import org.junit.Test;

import com.jaxio.domain.SavedSearch;
import com.jaxio.repository.SavedSearchRepositoryImpl;
import com.jaxio.dao.SavedSearchDao;
import com.jaxio.dao.support.SearchParameters;

/**
 * Unit test on SavedSearchRepositoryImpl
 */
public class SavedSearchRepositoryImplTest {

    private SavedSearchRepositoryImpl savedSearchRepositoryImpl;
    private SavedSearchDao savedSearchDao;

    @Before
    public void setUp() {
        // called before each test.
        savedSearchRepositoryImpl = new SavedSearchRepositoryImpl();
        savedSearchDao = mock(SavedSearchDao.class);
        savedSearchRepositoryImpl.setSavedSearchDao(savedSearchDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        SavedSearch none = null;

        when(savedSearchDao.findUniqueOrNone(any(SavedSearch.class), any(SearchParameters.class))).thenReturn(none);

        SavedSearch result = savedSearchRepositoryImpl.findUniqueOrNone(new SavedSearch());

        assertThat(result).isNull();
        verify(savedSearchDao, times(1)).findUniqueOrNone(any(SavedSearch.class), any(SearchParameters.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        SavedSearch unique = new SavedSearch();

        when(savedSearchDao.findUniqueOrNone(any(SavedSearch.class), any(SearchParameters.class))).thenReturn(unique);

        SavedSearch result = savedSearchRepositoryImpl.findUniqueOrNone(new SavedSearch());

        assertThat(result).isNotNull();
        verify(savedSearchDao, times(1)).findUniqueOrNone(any(SavedSearch.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        when(savedSearchDao.findUniqueOrNone(any(SavedSearch.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        savedSearchRepositoryImpl.findUniqueOrNone(new SavedSearch());
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NoResultException.class)
    public void testFindUniqueCaseNone() {
        when(savedSearchDao.findUnique(any(SavedSearch.class), any(SearchParameters.class))).thenThrow(NoResultException.class);

        savedSearchRepositoryImpl.findUnique(new SavedSearch());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        SavedSearch unique = new SavedSearch();

        when(savedSearchDao.findUnique(any(SavedSearch.class), any(SearchParameters.class))).thenReturn(unique);

        SavedSearch result = savedSearchRepositoryImpl.findUnique(new SavedSearch());

        assertThat(result).isNotNull();
        verify(savedSearchDao, times(1)).findUnique(any(SavedSearch.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueCaseMultiple() {
        when(savedSearchDao.findUnique(any(SavedSearch.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        savedSearchRepositoryImpl.findUnique(new SavedSearch());
    }
}