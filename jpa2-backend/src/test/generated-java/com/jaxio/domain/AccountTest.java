/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.jaxio.domain;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static org.fest.assertions.Assertions.assertThat;

import java.io.*;
import java.io.Serializable;
import java.util.*;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;
import org.junit.Test;

import com.jaxio.domain.Currency;
import com.jaxio.domain.Customer;
import com.jaxio.domain.Transaction;
import com.jaxio.util.*;

/**
 * Basic tests for Account
 */
@SuppressWarnings("unused")
public class AccountTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Account model = new Account();
        assertThat(model.isIdSet()).isFalse();
    }

    @Test
    public void isIdSetReturnsTrue() {
        Account model = new Account();
        model.setId(ValueGenerator.getUniqueInteger());
        assertThat(model.getId()).isNotNull();
        assertThat(model.isIdSet()).isTrue();
    }

    //-------------------------------------------------------------
    // Many to One:  Account.currency ==> Currency.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setCurrency() {
        Account many = new Account();

        // init
        Currency one = new Currency();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setCurrency(one);

        // make sure it is propagated properly
        assertThat(many.getCurrency()).isEqualTo(one);

        // now set it to back to null
        many.setCurrency(null);

        // make sure null is propagated properly
        assertThat(many.getCurrency()).isNull();
    }

    @Test
    public void manyToOne_setCustomer() {
        Account many = new Account();

        // init
        Customer one = new Customer();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setCustomer(one);

        // make sure it is propagated properly
        assertThat(many.getCustomer()).isEqualTo(one);

        // now set it to back to null
        many.setCustomer(null);

        // make sure null is propagated properly
        assertThat(many.getCustomer()).isNull();
    }

    //-------------------------------------------------------------
    // One to Many: SimpleOneToMany ACCOUNT.ID ==> TRANSACTION.ACCOUNT_ID
    //-------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // transaction.transaction <-- account.accounts
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void oneToMany_addTransaction() {
        Account one = new Account();
        Transaction many = new Transaction();

        // init
        one.addTransaction(many);

        // make sure it is propagated
        assertThat(one.getTransactions()).contains(many);
        assertThat(one).isEqualTo(many.getAccount());

        // now set it to null
        one.removeTransaction(many);

        // make sure null is propagated
        assertThat(one.getTransactions().contains(many)).isFalse();
        assertThat(many.getAccount()).isNull();
    }

    @Test
    public void equalsUsingBusinessKey() {
        Account model1 = new Account();
        Account model2 = new Account();
        String accountNumber = ValueGenerator.getUniqueString(100);
        model1.setAccountNumber(accountNumber);
        model2.setAccountNumber(accountNumber);
        assertThat(model1).isEqualTo(model2);
        assertThat(model2).isEqualTo(model1);
        assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
    }
}