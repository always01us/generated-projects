/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.jaxio.appli.domain;

import static org.fest.assertions.Assertions.assertThat;

import java.io.*;
import java.util.*;

import org.junit.Test;

import com.jaxio.appli.util.ValueGenerator;

/**
 * Basic tests for Account
 */
@SuppressWarnings("unused")
public class AccountTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Account model = new Account();
        assertThat(model.isIdSet()).isFalse();
    }

    @Test
    public void isIdSetReturnsTrue() {
        Account model = new Account();
        model.setId(ValueGenerator.getUniqueString(36));
        assertThat(model.getId()).isNotNull();
        assertThat(model.isIdSet()).isTrue();
    }

    //-------------------------------------------------------------
    // Many to One:  Account.homeAddress ==> Address.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setHomeAddress() {
        Account many = new Account();

        // init
        Address one = new Address();
        one.setId(ValueGenerator.getUniqueInteger());
        many.setHomeAddress(one);

        // make sure it is propagated properly
        assertThat(many.getHomeAddress()).isEqualTo(one);

        // now set it to back to null
        many.setHomeAddress(null);

        // make sure null is propagated properly
        assertThat(many.getHomeAddress()).isNull();
    }

    //-------------------------------------------------------------
    // One to Many: SimpleOneToMany ACCOUNT.ID ==> BOOK.ACCOUNT_ID
    //-------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // book.book <-- account.owners
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void oneToMany_addBook() {
        Account one = new Account();
        Book many = new Book();

        // init
        one.addBook(many);

        // make sure it is propagated
        assertThat(one.getCoolBooks()).contains(many);
        assertThat(one).isEqualTo(many.getOwner());

        // now set it to null
        one.removeBook(many);

        // make sure null is propagated
        assertThat(one.getCoolBooks().contains(many)).isFalse();
        assertThat(many.getOwner()).isNull();
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // document.edoc <-- account.owners
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void oneToMany_addEdoc() {
        Account one = new Account();
        Document many = new Document();

        // init
        one.addEdoc(many);

        // make sure it is propagated
        assertThat(one.getEdocs()).contains(many);
        assertThat(one).isEqualTo(many.getOwner());

        // now set it to null
        one.removeEdoc(many);

        // make sure null is propagated
        assertThat(one.getEdocs().contains(many)).isFalse();
        assertThat(many.getOwner()).isNull();
    }

    //-------------------------------------------------------------
    // Pure Many to Many
    //-------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void manyToMany_addSecurityRole() {
        Account many1 = new Account();
        Role many2 = new Role();

        // add it
        many1.addSecurityRole(many2);

        // check it is propagated
        assertThat(many1.getSecurityRoles()).contains(many2);
        // now let's remove it
        many1.removeSecurityRole(many2);

        // check it is propagated
        assertThat(many1.getSecurityRoles().contains(many2)).isFalse();
    }

    @Test
    public void equalsUsingBusinessKey() {
        Account model1 = new Account();
        Account model2 = new Account();
        String username = ValueGenerator.getUniqueString(100);
        model1.setUsername(username);
        model2.setUsername(username);
        assertThat(model1).isEqualTo(model2);
        assertThat(model2).isEqualTo(model1);
        assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
    }
}