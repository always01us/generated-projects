/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package com.jaxio.web.domain;

import static com.jaxio.dao.support.PropertySelector.newPropertySelector;

import javax.inject.Named;

import com.jaxio.dao.support.PropertySelector;
import com.jaxio.dao.support.SearchParameters;
import com.jaxio.domain.Civility;
import com.jaxio.domain.User;
import com.jaxio.domain.User_;
import com.jaxio.web.domain.support.GenericSearchForm;
import com.jaxio.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link User}.
 * It exposes a {@link User} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class UserSearchForm extends GenericSearchForm<User, Integer, UserSearchForm> {
    private static final long serialVersionUID = 1L;

    protected User user = new User();
    protected PropertySelector<User, String> usernameSelector = newPropertySelector(User_.username);
    protected PropertySelector<User, String> passwordSelector = newPropertySelector(User_.password);
    protected PropertySelector<User, String> emailSelector = newPropertySelector(User_.email);
    protected PropertySelector<User, Boolean> isEnabledSelector = newPropertySelector(User_.isEnabled);
    protected PropertySelector<User, Civility> civilitySelector = newPropertySelector(User_.civility);
    protected PropertySelector<User, String> firstNameSelector = newPropertySelector(User_.firstName);
    protected PropertySelector<User, String> lastNameSelector = newPropertySelector(User_.lastName);

    public User getUser() {
        return user;
    }

    @Override
    protected User getEntity() {
        return getUser();
    }

    @Override
    public UserSearchForm newInstance() {
        return new UserSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        return new SearchParameters() //
                .limitBroadSearch() //
                .anywhere() //
                .caseInsensitive() //
                .term(term) //
                .property(usernameSelector, passwordSelector, emailSelector, isEnabledSelector, civilitySelector, firstNameSelector, lastNameSelector) //
        ;
    }

    @Override
    public void resetWithOther(UserSearchForm other) {
        this.user = other.getUser();
        this.term = other.getTerm();
        this.usernameSelector = other.getUsernameSelector();
        this.passwordSelector = other.getPasswordSelector();
        this.emailSelector = other.getEmailSelector();
        this.isEnabledSelector = other.getIsEnabledSelector();
        this.civilitySelector = other.getCivilitySelector();
        this.firstNameSelector = other.getFirstNameSelector();
        this.lastNameSelector = other.getLastNameSelector();
    }

    // Property selectors
    public PropertySelector<User, String> getUsernameSelector() {
        return usernameSelector;
    }

    public PropertySelector<User, String> getPasswordSelector() {
        return passwordSelector;
    }

    public PropertySelector<User, String> getEmailSelector() {
        return emailSelector;
    }

    public PropertySelector<User, Boolean> getIsEnabledSelector() {
        return isEnabledSelector;
    }

    public PropertySelector<User, Civility> getCivilitySelector() {
        return civilitySelector;
    }

    public PropertySelector<User, String> getFirstNameSelector() {
        return firstNameSelector;
    }

    public PropertySelector<User, String> getLastNameSelector() {
        return lastNameSelector;
    }
}
