/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package com.jaxio.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;

import com.jaxio.domain.Role;
import com.jaxio.domain.User;
import com.jaxio.repository.UserRepository;
import com.jaxio.web.domain.RoleController;
import com.jaxio.web.domain.UserController;
import com.jaxio.web.domain.UserGraphLoader;
import com.jaxio.web.domain.support.GenericEditForm;
import com.jaxio.web.domain.support.GenericToManyAssociation;
import com.jaxio.web.faces.ConversationContextScoped;
import com.jaxio.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link User}.
 */
@Named
@ConversationContextScoped
public class UserEditForm extends GenericEditForm<User, Integer> {
    @Inject
    protected UserController userController;
    @Inject
    protected RoleController roleController;
    protected GenericToManyAssociation<Role, Integer> securityRoles;
    protected TabBean tabBean = new TabBean();

    @Inject
    public UserEditForm(UserRepository userRepository, UserGraphLoader userGraphLoader) {
        super(userRepository, userGraphLoader);
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    @Override
    public TabBean getTabBean() {
        return tabBean;
    }

    /**
     * The entity to edit/view.
     */
    public User getUser() {
        return getEntity();
    }

    public String print() {
        return userController.print(getUser());
    }

    @PostConstruct
    void setupSecurityRolesActions() {
        securityRoles = new GenericToManyAssociation<Role, Integer>(getUser().getSecurityRoles(), "user_securityRoles", roleController) {
            @Override
            protected void remove(Role role) {
                getUser().removeSecurityRole(role);
            }

            @Override
            protected void add(Role role) {
                // add the object only to the securityRole side of the relation 
                getUser().getSecurityRoles().add(role);
            }
        };
    }

    public GenericToManyAssociation<Role, Integer> getSecurityRoles() {
        return securityRoles;
    }
}
