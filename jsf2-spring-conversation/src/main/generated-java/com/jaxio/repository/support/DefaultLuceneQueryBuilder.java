/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/repository/support/DefaultLuceneQueryBuilder.p.vm.java
 */
package com.jaxio.repository.support;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Throwables.propagate;
import static com.google.common.collect.Lists.newArrayList;
import static org.apache.commons.lang.StringUtils.isBlank;
import static org.apache.commons.lang.StringUtils.isNotBlank;
import static org.apache.lucene.queryParser.QueryParser.escape;
import static org.apache.lucene.util.Version.LUCENE_36;

import java.util.List;

import javax.persistence.metamodel.SingularAttribute;

import org.apache.lucene.analysis.ASCIIFoldingFilter;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.Query;
import org.hibernate.search.jpa.FullTextEntityManager;

public class DefaultLuceneQueryBuilder implements LuceneQueryBuilder {

    private static final String SPACES_OR_PUNCTUATION = "\\p{Punct}|\\p{Blank}";

    @Override
    public Query build(FullTextEntityManager fullTextEntityManager, SearchParameters searchParameters, List<SingularAttribute<?, ?>> availableProperties) {
        List<String> clauses = newArrayList();
        addAllClauses(searchParameters, searchParameters.getTerms(), clauses, availableProperties);

        StringBuilder query = new StringBuilder();
        query.append("+(");
        for (String clause : clauses) {
            if (query.length() > 2) {
                query.append(" AND ");
            }
            query.append(clause);
        }
        query.append(")");

        if (query.length() == 3) {
            return null;
        }

        try {
            return new QueryParser(LUCENE_36, availableProperties.get(0).getName(), fullTextEntityManager.getSearchFactory().getAnalyzer("custom")).parse(query
                    .toString());
        } catch (Exception e) {
            throw propagate(e);
        }
    }

    private void addAllClauses(SearchParameters sp, List<TermSelector> terms, List<String> clauses, List<SingularAttribute<?, ?>> availableProperties) {
        for (TermSelector term : terms) {
            if (term.isNotEmpty()) {
                addClause(sp, term.getSelected(), term.getAttribute(), clauses, availableProperties);
            }
        }
    }

    private void addClause(SearchParameters sp, List<String> terms, SingularAttribute<?, ?> property, List<String> clauses,
            List<SingularAttribute<?, ?>> availableProperties) {
        if (property != null) {
            checkArgument(availableProperties.contains(property), property + " is not indexed");
            StringBuilder subQuery = new StringBuilder();
            if (terms != null) {
                subQuery.append("(");
                for (String wordWithSpacesOrPunctuation : terms) {
                    if (isBlank(wordWithSpacesOrPunctuation)) {
                        continue;
                    }
                    List<String> wordElements = newArrayList();
                    for (String str : wordWithSpacesOrPunctuation.split(SPACES_OR_PUNCTUATION)) {
                        if (isNotBlank(str)) {
                            wordElements.add(str);
                        }
                    }
                    if (!wordElements.isEmpty()) {
                        if (subQuery.length() > 1) {
                            subQuery.append(" OR ");
                        }
                        subQuery.append(buildSubQuery(property, wordElements, sp));
                    }
                }
                subQuery.append(")");
            }
            if (subQuery.length() > 2) {
                clauses.add(subQuery.toString());
            }
        } else {
            addOnAnyClause(sp, terms, availableProperties, clauses, availableProperties);
        }
    }

    private String buildSubQuery(SingularAttribute<?, ?> property, List<String> terms, SearchParameters sp) {
        StringBuilder subQuery = new StringBuilder();
        subQuery.append("(");
        for (String term : terms) {
            if (subQuery.length() > 1) {
                subQuery.append(" AND ");
            }
            if (sp.getSearchSimilarity() != null) {
                subQuery.append(property.getName() + ":" + escapeForFuzzy(term) + "~" + sp.getSearchSimilarity());
            } else {
                subQuery.append(property.getName() + ":" + escape(term));
            }
        }
        subQuery.append(")");
        return subQuery.toString();
    }

    private void addOnAnyClause(SearchParameters sp, List<String> terms, List<SingularAttribute<?, ?>> properties, List<String> clauses,
            List<SingularAttribute<?, ?>> availableProperties) {
        List<String> subClauses = newArrayList();
        for (SingularAttribute<?, ?> property : properties) {
            addClause(sp, terms, property, subClauses, availableProperties);
        }
        if (subClauses.isEmpty()) {
            return;
        }
        if (subClauses.size() > 1) {
            StringBuilder subQuery = new StringBuilder();
            subQuery.append("(");
            for (String subClause : subClauses) {
                if (subQuery.length() > 1) {
                    subQuery.append(" OR ");
                }
                subQuery.append(subClause);
            }
            subQuery.append(")");
            clauses.add(subQuery.toString());
        } else {
            clauses.add(subClauses.get(0));
        }
    }

    /**
     * Apply same filtering as "custom" analyzer. Lowercase is done by QueryParser for fuzzy search.
     * 
     * @param word
     * @return
     */
    private String escapeForFuzzy(String word) {
        int length = word.length();
        char[] tmp = new char[length * 4];
        length = ASCIIFoldingFilter.foldToASCII(word.toCharArray(), 0, tmp, 0, length);
        return new String(tmp, 0, length);
    }
}
