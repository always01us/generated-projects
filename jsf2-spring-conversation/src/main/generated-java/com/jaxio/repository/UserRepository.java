/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/project/repository/Repository.e.vm.java
 */
package com.jaxio.repository;

import static org.apache.commons.lang.StringUtils.isBlank;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import org.springframework.transaction.annotation.Transactional;

import com.jaxio.dao.UserDao;
import com.jaxio.domain.User;
import com.jaxio.repository.support.GenericRepository;

@Named
@Singleton
public class UserRepository extends GenericRepository<User, Integer> {

    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
    protected UserRepository() {
        super();
    }

    @Inject
    public UserRepository(UserDao userDao) {
        super(userDao);
    }

    @Override
    public User getNew() {
        return new User();
    }

    @Override
    public User getNewWithDefaults() {
        User result = getNew();
        result.initDefaultValues();
        return result;
    }

    @Override
    @Transactional(readOnly = true)
    public User get(User model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
            return super.get(model);
        }
        if (isBlank(model.getUsername())) {
            User result = getByUsername(model.getUsername());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * Return the persistent instance of {@link User} with the given unique property value username,
     * or null if there is no such persistent instance.
     *
     * @param username the unique value
     * @return the corresponding {@link User} persistent instance or null
     */
    @Transactional(readOnly = true)
    public User getByUsername(String username) {
        return findUniqueOrNone(new User().username(username));
    }

    /**
     * Delete a {@link User} using the unique column username
     *
     * @param username the unique value
     */
    @Transactional
    public void deleteByUsername(String username) {
        delete(getByUsername(username));
    }
}