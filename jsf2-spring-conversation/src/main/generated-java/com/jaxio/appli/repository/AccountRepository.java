/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
 */
package com.jaxio.appli.repository;

import javax.inject.Named;
import javax.inject.Singleton;

import org.springframework.transaction.annotation.Transactional;

import com.jaxio.appli.domain.Account;
import com.jaxio.appli.repository.support.GenericRepository;

/**
 * {@link GenericRepository} for {@link Account} 
 */
@Named
@Singleton
public class AccountRepository extends GenericRepository<Account, String> {

    public AccountRepository() {
        super(Account.class);
    }

    @Override
    public Account getNew() {
        return new Account();
    }

    @Override
    public Account getNewWithDefaults() {
        return getNew().withDefaults();
    }

    /**
     * Return the persistent instance of {@link Account} with the given unique property value username,
     * or null if there is no such persistent instance.
     *
     * @param username the unique value
     * @return the corresponding {@link Account} persistent instance or null
     */
    @Transactional(readOnly = true)
    public Account getByUsername(String username) {
        return findUniqueOrNone(new Account().username(username));
    }

    /**
     * Delete a {@link Account} using the unique column username
     *
     * @param username the unique value
     */
    @Transactional
    public void deleteByUsername(String username) {
        delete(getByUsername(username));
    }

    /**
     * Return the persistent instance of {@link Account} with the given unique property value email,
     * or null if there is no such persistent instance.
     *
     * @param email the unique value
     * @return the corresponding {@link Account} persistent instance or null
     */
    @Transactional(readOnly = true)
    public Account getByEmail(String email) {
        return findUniqueOrNone(new Account().email(email));
    }

    /**
     * Delete a {@link Account} using the unique column email
     *
     * @param email the unique value
     */
    @Transactional
    public void deleteByEmail(String email) {
        delete(getByEmail(email));
    }
}