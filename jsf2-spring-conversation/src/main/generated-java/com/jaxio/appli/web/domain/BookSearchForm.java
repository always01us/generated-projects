/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package com.jaxio.appli.web.domain;

import static com.jaxio.appli.repository.support.PropertySelector.newPropertySelector;
import static com.jaxio.appli.repository.support.Range.newRange;

import javax.inject.Named;

import com.jaxio.appli.domain.Account;
import com.jaxio.appli.domain.Book;
import com.jaxio.appli.domain.Book_;
import com.jaxio.appli.repository.support.PropertySelector;
import com.jaxio.appli.repository.support.Range;
import com.jaxio.appli.repository.support.SearchParameters;
import com.jaxio.appli.repository.support.TermSelector;
import com.jaxio.appli.web.domain.support.GenericSearchForm;
import com.jaxio.appli.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link Book}.
 * It exposes a {@link Book} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class BookSearchForm extends GenericSearchForm<Book, Integer, BookSearchForm> {
    private static final long serialVersionUID = 1L;

    // full text search (applied first)
    protected TermSelector bookTitleTermSelector = new TermSelector(Book_.bookTitle);
    protected TermSelector numberOfPagesTermSelector = new TermSelector(Book_.numberOfPages);

    // classic search
    protected Book book = new Book();
    protected Range<Book, Integer> numberOfPagesRange = newRange(Book_.numberOfPages);
    protected PropertySelector<Book, String> bookTitleSelector = newPropertySelector(Book_.bookTitle);
    protected PropertySelector<Book, Integer> numberOfPagesSelector = newPropertySelector(Book_.numberOfPages);
    protected PropertySelector<Book, Account> ownerSelector = newPropertySelector(Book_.owner);

    public Book getBook() {
        return book;
    }

    @Override
    protected Book getEntity() {
        return getBook();
    }

    @Override
    public BookSearchForm newInstance() {
        return new BookSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.term(termsOnAll, bookTitleTermSelector, numberOfPagesTermSelector);
        sp.fetch(Book_.owner);
        sp.range(numberOfPagesRange);
        sp.property(bookTitleSelector, numberOfPagesSelector);
        sp.property(ownerSelector);
        return sp;
    }

    @Override
    public void resetWithOther(BookSearchForm other) {
        this.book = other.getBook();
        this.termsOnAll = other.getTermsOnAll();
        this.bookTitleTermSelector = other.getBookTitleTermSelector();
        this.numberOfPagesTermSelector = other.getNumberOfPagesTermSelector();
        this.numberOfPagesRange = other.getNumberOfPagesRange();
        this.bookTitleSelector = other.getBookTitleSelector();
        this.numberOfPagesSelector = other.getNumberOfPagesSelector();
        this.ownerSelector = other.getOwnerSelector();
    }

    // Term selectors    
    public TermSelector getBookTitleTermSelector() {
        return bookTitleTermSelector;
    }

    public TermSelector getNumberOfPagesTermSelector() {
        return numberOfPagesTermSelector;
    }

    // Ranges
    public Range<Book, Integer> getNumberOfPagesRange() {
        return numberOfPagesRange;
    }

    // Property selectors
    public PropertySelector<Book, String> getBookTitleSelector() {
        return bookTitleSelector;
    }

    public PropertySelector<Book, Integer> getNumberOfPagesSelector() {
        return numberOfPagesSelector;
    }

    // Relation selectors
    public PropertySelector<Book, Account> getOwnerSelector() {
        return ownerSelector;
    }
}
