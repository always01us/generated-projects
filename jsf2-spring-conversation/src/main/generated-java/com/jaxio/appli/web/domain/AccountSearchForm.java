/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package com.jaxio.appli.web.domain;

import static com.jaxio.appli.repository.support.PropertySelector.newPropertySelector;
import static com.jaxio.appli.repository.support.Range.newRange;

import java.util.Date;

import javax.inject.Named;

import com.jaxio.appli.domain.Account;
import com.jaxio.appli.domain.Account_;
import com.jaxio.appli.domain.Address;
import com.jaxio.appli.domain.Civility;
import com.jaxio.appli.domain.Role;
import com.jaxio.appli.repository.support.PropertySelector;
import com.jaxio.appli.repository.support.Range;
import com.jaxio.appli.repository.support.SearchParameters;
import com.jaxio.appli.repository.support.TermSelector;
import com.jaxio.appli.web.domain.support.GenericSearchForm;
import com.jaxio.appli.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link Account}.
 * It exposes a {@link Account} instance so it can be used in search by-example-query.
 */
@Named
@ConversationContextScoped
public class AccountSearchForm extends GenericSearchForm<Account, String, AccountSearchForm> {
    private static final long serialVersionUID = 1L;

    // full text search (applied first)
    protected TermSelector usernameTermSelector = new TermSelector(Account_.username);
    protected TermSelector emailTermSelector = new TermSelector(Account_.email);
    protected TermSelector firstNameTermSelector = new TermSelector(Account_.firstName);
    protected TermSelector lastNameTermSelector = new TermSelector(Account_.lastName);

    // classic search
    protected Account account = new Account();
    protected Range<Account, Date> birthDateRange = newRange(Account_.birthDate);
    protected PropertySelector<Account, String> usernameSelector = newPropertySelector(Account_.username);
    protected PropertySelector<Account, String> passwordSelector = newPropertySelector(Account_.password);
    protected PropertySelector<Account, String> emailSelector = newPropertySelector(Account_.email);
    protected PropertySelector<Account, Boolean> isEnabledSelector = newPropertySelector(Account_.isEnabled);
    protected PropertySelector<Account, Civility> civilitySelector = newPropertySelector(Account_.civility);
    protected PropertySelector<Account, String> firstNameSelector = newPropertySelector(Account_.firstName);
    protected PropertySelector<Account, String> lastNameSelector = newPropertySelector(Account_.lastName);
    protected PropertySelector<Account, String> descriptionSelector = newPropertySelector(Account_.description);
    protected PropertySelector<Account, Address> homeAddressSelector = newPropertySelector(Account_.homeAddress);
    protected PropertySelector<Account, Role> securityRolesSelector = newPropertySelector(false, Account_.securityRoles);

    public Account getAccount() {
        return account;
    }

    @Override
    protected Account getEntity() {
        return getAccount();
    }

    @Override
    public AccountSearchForm newInstance() {
        return new AccountSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        SearchParameters sp = searchParameters();
        sp.term(termsOnAll, usernameTermSelector, emailTermSelector, firstNameTermSelector, lastNameTermSelector);
        sp.fetch(Account_.homeAddress);
        sp.range(birthDateRange);
        sp.property(usernameSelector, passwordSelector, emailSelector, isEnabledSelector, civilitySelector, firstNameSelector, lastNameSelector,
                descriptionSelector);
        sp.property(homeAddressSelector);
        sp.property(securityRolesSelector);
        return sp;
    }

    @Override
    public void resetWithOther(AccountSearchForm other) {
        this.account = other.getAccount();
        this.termsOnAll = other.getTermsOnAll();
        this.usernameTermSelector = other.getUsernameTermSelector();
        this.emailTermSelector = other.getEmailTermSelector();
        this.firstNameTermSelector = other.getFirstNameTermSelector();
        this.lastNameTermSelector = other.getLastNameTermSelector();
        this.birthDateRange = other.getBirthDateRange();
        this.usernameSelector = other.getUsernameSelector();
        this.passwordSelector = other.getPasswordSelector();
        this.emailSelector = other.getEmailSelector();
        this.isEnabledSelector = other.getIsEnabledSelector();
        this.civilitySelector = other.getCivilitySelector();
        this.firstNameSelector = other.getFirstNameSelector();
        this.lastNameSelector = other.getLastNameSelector();
        this.descriptionSelector = other.getDescriptionSelector();
        this.homeAddressSelector = other.getHomeAddressSelector();
        this.securityRolesSelector = other.getSecurityRolesSelector();
    }

    // Term selectors    
    public TermSelector getUsernameTermSelector() {
        return usernameTermSelector;
    }

    public TermSelector getEmailTermSelector() {
        return emailTermSelector;
    }

    public TermSelector getFirstNameTermSelector() {
        return firstNameTermSelector;
    }

    public TermSelector getLastNameTermSelector() {
        return lastNameTermSelector;
    }

    // Ranges
    public Range<Account, Date> getBirthDateRange() {
        return birthDateRange;
    }

    // Property selectors
    public PropertySelector<Account, String> getUsernameSelector() {
        return usernameSelector;
    }

    public PropertySelector<Account, String> getPasswordSelector() {
        return passwordSelector;
    }

    public PropertySelector<Account, String> getEmailSelector() {
        return emailSelector;
    }

    public PropertySelector<Account, Boolean> getIsEnabledSelector() {
        return isEnabledSelector;
    }

    public PropertySelector<Account, Civility> getCivilitySelector() {
        return civilitySelector;
    }

    public PropertySelector<Account, String> getFirstNameSelector() {
        return firstNameSelector;
    }

    public PropertySelector<Account, String> getLastNameSelector() {
        return lastNameSelector;
    }

    public PropertySelector<Account, String> getDescriptionSelector() {
        return descriptionSelector;
    }

    // Relation selectors
    public PropertySelector<Account, Address> getHomeAddressSelector() {
        return homeAddressSelector;
    }

    // Relation selectors
    public PropertySelector<Account, Role> getSecurityRolesSelector() {
        return securityRolesSelector;
    }
}
