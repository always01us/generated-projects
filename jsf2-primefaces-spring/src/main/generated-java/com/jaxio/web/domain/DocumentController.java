/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
 */
package com.jaxio.web.domain;

import java.io.ByteArrayInputStream;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import javax.servlet.http.HttpServletRequest;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import com.jaxio.domain.Document;
import com.jaxio.repository.DocumentRepository;
import com.jaxio.web.conversation.Conversation;
import com.jaxio.web.conversation.ConversationContext;
import com.jaxio.web.conversation.ConversationFactory;
import com.jaxio.web.domain.support.GenericController;
import com.jaxio.web.permission.DocumentPermission;

/**
 * Stateless controller for Document conversation start. Provides also auto-complete support. 
 */
@Named
@Singleton
public class DocumentController extends GenericController<Document, String> implements ConversationFactory {
    public final static String editUri = "/domain/documentEdit.faces";
    public final static String selectUri = "/domain/documentSelect.faces";

    @Inject
    public DocumentController(DocumentRepository documentRepository, DocumentPermission documentPermission) {
        super(documentRepository, documentPermission);
    }

    // -------------------
    // ConversationFactory
    // -------------------

    @Override
    public boolean canCreateConversation(HttpServletRequest request) {
        return selectUri.equals(request.getServletPath()) || editUri.equals(request.getServletPath());
    }

    @Override
    public Conversation createConversation(HttpServletRequest request) {
        String uri = request.getServletPath();
        if (selectUri.equals(uri)) {
            return Conversation.newConversation(request, newSearchContext("document"));
        } else if (editUri.equals(uri)) {
            return Conversation.newConversation(request, newEditContext("document", new Document()));
        } else {
            throw new IllegalStateException("Unexpected conversation creation demand");
        }
    }

    // --------------------------------
    // Upload/Download support 
    // --------------------------------    

    public DocumentUploadHandler getUploadHandler(Document document) {
        return new DocumentUploadHandler(document);
    }

    /**
     * Primefaces support for documentBinary file download
     */
    public StreamedContent getStreamedContent(Document document) {
        return new DefaultStreamedContent(new ByteArrayInputStream(document.getDocumentBinary()), document.getDocumentContentType(), document
                .getDocumentFileName());
    }

    // --------------------------------
    // Helper 
    // --------------------------------    

    /**
     * Helper to construct a new ConversationContext to edit an Document.
     * @param document the entity to edit.
     */
    public ConversationContext<Document> newEditContext(final Document document) {
        ConversationContext<Document> ctx = new ConversationContext<Document>();
        ctx.setEntity(document); // used by GenericEditForm.init()
        ctx.setIsNewEntity(!document.isIdSet());
        ctx.setViewUri(editUri);
        return ctx;
    }

    /**
     * Helper to construct a new ConversationContext for search/selection.
     */
    public ConversationContext<Document> newSearchContext() {
        ConversationContext<Document> ctx = new ConversationContext<Document>();
        ctx.setViewUri(selectUri);
        return ctx;
    }
}