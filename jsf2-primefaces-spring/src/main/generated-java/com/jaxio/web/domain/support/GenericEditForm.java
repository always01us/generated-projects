/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericEditForm.p.vm.java
 */
package com.jaxio.web.domain.support;

import java.io.Serializable;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import com.jaxio.dao.support.JpaUniqueUtil;
import com.jaxio.domain.Identifiable;
import com.jaxio.repository.support.EntityGraphLoader;
import com.jaxio.repository.support.Repository;
import com.jaxio.web.util.MessageUtil;

/**
 * Base Edit Form for JPA entities.
 */
public abstract class GenericEditForm<E extends Identifiable<PK>, PK extends Serializable> extends CommonAction<E> {
    private E entity;

    @Inject
    protected JpaUniqueUtil jpaUniqueUtil;

    @Inject
    protected MessageUtil messageUtil;

    protected Repository<E, PK> repository;
    protected EntityGraphLoader<E> entityGraphLoader;

    protected void setRepository(Repository<E, PK> repository) {
        this.repository = repository;
    }

    protected void setEntityGraphLoader(EntityGraphLoader<E> entityGraphLoader) {
        this.entityGraphLoader = entityGraphLoader;
    }

    protected EntityGraphLoader<E> getEntityGraphLoader() {
        return entityGraphLoader;
    }

    /**
     * Retrieves the entity or entityId parameter from the current ConversationContext and
     * load the entity from the repository. 
     */
    @PostConstruct
    protected void init() {
        if (context().getEntity() == null) {
            throw new IllegalStateException("Could not find any entity. Please fix me");
        }

        if (context().isNewEntity()) {
            // no need to merge anything since it is a brand new entity, not yet persisted.
            entity = context().getEntity();
        } else if (context().isSub()) {
            // entity is persistent and we are in sub mode (not the root edit page of the graph)
            entity = repository.mergeWithoutFlush(context().getEntity(), getEntityGraphLoader());
        } else {
            // entity is persistent and we are in the root edit page.
            // we either come from a main search page or brand new edit conversation
            entity = repository.getById(context().getEntity().getId(), getEntityGraphLoader());
        }

        if (entity == null) {
            throw new IllegalStateException("Could not find any entity, after init! Was it deleted?");
        }
    }

    /**
     * Return the entity that this edit form backs.
     */
    public E getEntity() {
        return entity;
    }

    // ------------------------------------
    // Actions
    // ------------------------------------

    /**
     * Ok action is used from sub page (non-readonly) to send the data without saving it. 
     * It is expected to be ajax since we want to display the errors, if any,
     * without refreshing the page.
     */
    public String ok() {
        return context().getCallBack().ok(getEntity());
    }

    /**
     * Close the current edit page, without any dirty data checking.
     */
    public String forceClose() {
        return context().getCallBack().notSaved(getEntity());
    }

    /**
     * deleteAndClose action is used form modal dialogs in the main edit page. 
     */
    public String deleteAndClose() {
        repository.delete(getEntity());
        messageUtil.infoEntity("status_deleted_ok", getEntity());
        return context().getCallBack().deleted(getEntity());
    }

    /**
     * Save action. Used from main edit page. Expected to be an ajax request.
     */
    public String saveAndClose() {
        if (saveAndCloseInternal(getEntity())) {
            return context().getCallBack().saved(getEntity());
        }
        return null;
    }

    protected boolean saveAndCloseInternal(E entity) {
        if (!validate(entity)) {
            return false;
        }

        // Note: merge work also on new entity (actually it works better with many to many association)
        // we replace current entity with the merged one so the callback receive the merged one.
        entity = repository.merge(entity);

        if (context().isNewEntity()) {
            // if for some reason, save is invoked again, no need to persist anymore.
            context().setIsNewEntity(false);
        }

        messageUtil.infoEntity("status_saved_ok", entity);
        return true;
    }

    public boolean validate(E entity) {
        List<String> errors = jpaUniqueUtil.validateUniques(entity);
        for (String error : errors) {
            messageUtil.error(error);
        }
        return errors.isEmpty();
    }

    protected void checkPermission(boolean check) {
        if (!check) {
            throw new IllegalStateException();
        }
    }
}