/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package com.jaxio.web.domain;

import javax.inject.Inject;
import javax.inject.Named;
import com.jaxio.domain.Account;
import com.jaxio.domain.SavedSearch;
import com.jaxio.repository.SavedSearchRepository;
import com.jaxio.web.conversation.ConversationCallBack;
import com.jaxio.web.domain.AccountController;
import com.jaxio.web.domain.SavedSearchGraphLoader;
import com.jaxio.web.domain.support.GenericEditForm;
import com.jaxio.web.faces.Conversation;
import com.jaxio.web.permission.AccountPermission;

/**
 * View Helper/Controller to edit {@link SavedSearch}.
 */
@Named
@Conversation
public class SavedSearchEditForm extends GenericEditForm<SavedSearch, Integer> {
    @Inject
    public void setSavedSearchRepository(SavedSearchRepository savedSearchRepository) {
        setRepository(savedSearchRepository);
    }

    @Inject
    public void setSavedSearchGraphLoader(SavedSearchGraphLoader savedSearchGraphLoader) {
        setEntityGraphLoader(savedSearchGraphLoader);
    }

    public SavedSearch getSavedSearch() {
        return getEntity();
    }

    // --------------------------------------------
    // Actions for account association
    // --------------------------------------------
    @Inject
    private AccountController accountController;

    @Inject
    private AccountPermission accountPermission;

    public String viewAccount() {
        return accountController.editSubReadOnlyView("savedSearch_account", getSavedSearch().getAccount());
    }

    /**
     * Helper for the autoComplete component used for the SavedSearch's account property.
     */
    public Account getSelectedAccount() {
        return getSavedSearch().getAccount();
    }

    /**
     * Helper for the autoComplete component used for the SavedSearch's account property.
     * Handles ajax autoComplete event and regular page postback.
     */
    public void setSelectedAccount(Account account) {
        if (accountController.shouldReplace(getSavedSearch().getAccount(), account)) {
            getSavedSearch().setAccount(account);
        }
    }

    /**
     * Action to navigate to the Account select page in order to select a new Account
     * to be set on this SavedSearch's account property.
     */
    public String selectAccount() {
        return accountController.selectSubView("savedSearch_account", selectAccountCallBack);
    }

    protected ConversationCallBack<Account> selectAccountCallBack = new ConversationCallBack<Account>() {
        private static final long serialVersionUID = 1L;

        // will be invoked from the AccountLazyDataModel
        @Override
        protected void onSelected(Account account) {
            checkPermission(accountPermission.canSelect(account));
            getSavedSearch().setAccount(account);
            messageUtil.infoEntity("status_selected_ok", getSavedSearch().getAccount());
        }
    };

    public String addAccount() {
        return accountController.createSubView("savedSearch_account", addAccountCallBack);
    }

    protected ConversationCallBack<Account> addAccountCallBack = new ConversationCallBack<Account>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Account account) {
            checkPermission(accountPermission.canCreate());
            getSavedSearch().setAccount(account);
            messageUtil.infoEntity("status_created_ok", account);
        }
    };

    public String editAccount() {
        return accountController.editSubView("savedSearch_account", getSavedSearch().getAccount(), editAccountCallBack);
    }

    protected ConversationCallBack<Account> editAccountCallBack = new ConversationCallBack<Account>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Account account) {
            getSavedSearch().setAccount(account);
            messageUtil.infoEntity("status_edited_ok", account);
        }
    };
}
