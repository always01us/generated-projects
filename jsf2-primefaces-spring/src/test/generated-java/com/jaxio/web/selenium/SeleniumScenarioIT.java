/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-selenium-primefaces:src/test/java/selenium/SeleniumScenarioIT.p.vm.java
 */
package com.jaxio.web.selenium;

import static org.fest.assertions.Assertions.assertThat;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import com.jaxio.web.selenium.page.account.AccountEditPage;
import com.jaxio.web.selenium.page.account.AccountSearchPage;
import com.jaxio.web.selenium.page.document.DocumentEditPage;
import com.jaxio.web.selenium.page.document.DocumentSearchPage;
import com.jaxio.web.selenium.page.role.RoleSearchPage;
import com.jaxio.web.selenium.page.role.RoleEditPage;

import com.jaxio.web.selenium.support.ClientRule;
import com.jaxio.web.selenium.support.Client;
import com.jaxio.web.selenium.page.AnonymousHomePage;
import com.jaxio.web.selenium.page.LoggedHomePage;
import com.jaxio.web.selenium.page.LoginPage;

@SuppressWarnings("unused")
public class SeleniumScenarioIT {
    @Rule
    public ClientRule clientRule = new ClientRule(this);
    Client client;

    LoginPage loginPage;
    AnonymousHomePage anonymousHomePage;
    LoggedHomePage loggedHomePage;

    // account
    AccountSearchPage accountSearchPage;
    AccountEditPage accountEditPage;

    // document
    DocumentSearchPage documentSearchPage;
    DocumentEditPage documentEditPage;

    // role
    RoleSearchPage roleSearchPage;
    RoleEditPage roleEditPage;

    @Before
    public void setup() {
        client = clientRule.getClient();
    }

    @Test
    public void openHomepage() {
        client.page("/home.faces");
    }

    @Test
    public void asAnUnknownUserICannotLogIn() {
        englishHomePage();
        client.step("Login as unknown_user, and verify it is not valid");
        anonymousHomePage.connexion();
        loginPage.login("unknownUser", "invalidPassword");
        client.text("Invalid login or password");

    }

    private void englishHomePage() {
        client.page("/home.faces");
        client.step("Switch to english");
        anonymousHomePage.switchToEnglish();
    }

    @Test
    public void complexeSearches() {
        englishHomePage();
        loginAsAnAdmin();
        loggedHomePage.accounts();
        client.step("Test complexe searches");
        client.autocomplete(accountSearchPage.homeAddress, "pari", "Paris");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("one result");

        client.autocomplete(accountSearchPage.homeAddress, "tok", "Tokyo");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("52 results");

        client.autocomplete(accountSearchPage.securityRoles, "use", "ROLE_USER");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("2 results");

        client.autocomplete(accountSearchPage.securityRoles, "role_admin", "ROLE_ADMIN");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("one result");

        client.step("Reset search form");
        accountSearchPage.resetSearch();

        client.autocomplete(accountSearchPage.username, "homer");
        client.autocomplete(accountSearchPage.username, "admin");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("2 results");

        client.autocomplete(accountSearchPage.securityRoles, "mon", "ROLE_MONITORING");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("one result");
    }

    @Test
    public void fullTextQueries() {
        englishHomePage();
        loginAsAnAdmin();
        loggedHomePage.accounts();

        client.step("Full text search on all fields");
        accountSearchPage.fullTextQuery("hoomer");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("one result");

        accountSearchPage.resetSearch();
        client.step("Full text search on a specific field");
        client.autocomplete(accountSearchPage.username, "hoomhe", "homer");
        accountSearchPage.search();

        accountSearchPage.resetSearch();
        client.step("Full text search on a many to many field");
        client.autocomplete(accountSearchPage.securityRoles, "hadmihn", "ROLE_ADMIN");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("one result");

        accountSearchPage.resetSearch();
        client.step("Full text search on a many to one field");
        client.autocomplete(accountSearchPage.homeAddress, "frankisko", "San Francisco");
        client.autocomplete(accountSearchPage.homeAddress, "parhis", "Paris");
        accountSearchPage.search();
        accountSearchPage.resultSizeContains("one result");
    }

    @Test
    public void asAnAdminICanUpdateAUserAndLogInWithThisUpdatedUser() {
        String userName = "user19";
        englishHomePage();
        loginAsAnAdmin();
        searchForAccounts();
        searchAndEditAccount(userName);
        logout();
        loginAsPreviouslyModifiedUser();
        logout();
        loginAsAnAdmin();
        revertChangesDoneToUser(userName);
    }

    private void loginAsAnAdmin() {
        client.step("Login as admin");
        anonymousHomePage.connexion();
        loginPage.login("admin", "admin");
    }

    private void searchForAccounts() {
        client.step("Go to accounts, and verify their number");
        loggedHomePage.accounts();
        accountSearchPage.resultSizeContains("53");
        client.step("Search by mail and verify ajax, next/previous navigation");
        accountSearchPage.searchByEmail("1");
        accountSearchPage.currentPageIs("1");
        accountSearchPage.resultSizeContains("13");
        accountSearchPage.nextPage();
        accountSearchPage.currentPageIs("2");
        accountSearchPage.previousPage();
        accountSearchPage.currentPageIs("1");
    }

    private void searchAndEditAccount(String userName) {
        selectAccount(userName);
        updateAccount("cnorris", "kickass", "gmail@chucknorris.com");
        addRoleAdminToAccount();
        createRoleGodToAccount();
        addDocumentToAccount();
        saveToDatabase("cnorris");
    }

    private void updateAccount(String userName, String password, String email) {
        accountEditPage.hasText("Username");
        accountEditPage.update(userName, password, email);
    }

    private void selectAccount(String userName) {
        client.step("Search by username, select the user, and update its value");
        accountSearchPage.searchByUsername(userName);
        accountSearchPage.hasText(userName + "@example.com");
        accountSearchPage.editAccount(userName);
    }

    private void addRoleAdminToAccount() {
        client.step("Add a ROLE_ADMIN to the selected user");
        accountEditPage.openSecurityRoleTab();
        accountEditPage.searchSecurityRole();
        roleSearchPage.searchByRolename("ADMIN");
        roleSearchPage.selectRole("ROLE_ADMIN");
        accountEditPage.hasMessage("ROLE_ADMIN: Selected existing and added it, but not saved in database");
    }

    private void createRoleGodToAccount() {
        client.step("Create a ROLE_GOD for the the selected user");
        accountEditPage.addSecurityRole();
        client.fill(roleEditPage.roleName, "ROLE_GOD");
        accountEditPage.ok();
        accountEditPage.hasMessage("ROLE_GOD: Created one and added it, but not saved in database");
    }

    private void addDocumentToAccount() {
        client.step("Add a document");
        accountEditPage.openEdocTab();
        accountEditPage.addEdoc();
        documentEditPage.sendDocumentBinary("./src/test/resources/for_upload.txt");
        documentEditPage.ok();
    }

    private void saveToDatabase(String userName) {
        client.step("Save to database");
        accountEditPage.save();
        accountSearchPage.hasMessage("Saved \"" + userName + "\" successfully in database");
    }

    private void logout() {
        client.step("Logout");
        loggedHomePage.logout();
        loggedHomePage.switchToEnglish();
    }

    private void loginAsPreviouslyModifiedUser() {
        client.step("Let's try to log as cnorris as set previously");
        anonymousHomePage.connexion();
        loginPage.login("cnorris", "kickass");
        loggedHomePage.accounts();
    }

    private void revertChangesDoneToUser(String userName) {
        client.step("Select account and revert previous changes");
        loggedHomePage.accounts();
        accountSearchPage.searchByUsername("cnorris");
        accountSearchPage.hasText("gmail@chucknorris.com");
        accountSearchPage.editAccount("cnorris");
        accountSearchPage.hasText("Username");
        accountEditPage.update(userName, userName, userName + "@example.com");
        accountEditPage.openEdocTab();
        accountEditPage.deleteEdoc("for_upload.txt");
        accountEditPage.openSecurityRoleTab();
        accountEditPage.deleteSecurityRole("ROLE_ADMIN");
        accountEditPage.save();
        accountSearchPage.hasMessage("Saved \"" + userName + "\" successfully in database");
    }
}