/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-selenium-primefaces:src/test/java/selenium/pages/AbstractSearchPage.p.vm.java
 */
package com.jaxio.web.selenium.page;

import static org.apache.commons.lang.StringUtils.containsIgnoreCase;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;

public abstract class AbstractSearchPage extends HomePage {
    // header
    @FindBy(id = "form:cancel")
    public WebElement backButton;
    @FindBy(id = "form:quit")
    public WebElement quitButton;
    @FindBy(id = "form:create")
    public WebElement createButton;

    // search box
    @FindBy(id = "form:search")
    public WebElement searchButton;
    @FindBy(id = "form:resetSearch")
    public WebElement resetSearchButton;
    @FindBy(id = "form:fullTextQuery")
    public WebElement fullTextInput;

    // sum
    @FindBy(id = "searchResultsRegion")
    public WebElement searchResultsRegion;

    // paginator
    @FindBy(css = "div.ui-paginator-bottom span.ui-paginator-pages span.ui-state-active")
    public WebElement paginatorCurrent;
    @FindBy(css = "div.ui-paginator-bottom span.ui-icon-seek-next")
    public WebElement paginatorNextButton;
    @FindBy(css = "div.ui-paginator-bottom span.ui-icon-seek-prev")
    public WebElement paginatorPrevButton;

    public void back() {
        client.click(backButton);
    }

    public void quit() {
        client.click(quitButton);
    }

    public void create() {
        client.click(createButton);
    }

    public void search() {
        client.click(searchButton);
    }

    public void resetSearch() {
        client.click(resetSearchButton);
    }

    public void nextPage() {
        client.click(paginatorNextButton);
    }

    public void previousPage() {
        client.click(paginatorPrevButton);
    }

    public void fullTextQuery(String query) {
        client.fill(fullTextInput, query);
    }

    public void resultSizeContains(String value) {
        String searchResults = searchResultsRegion.getText();
        if (!containsIgnoreCase(searchResults, value)) {
            throw new IllegalStateException(value + " should be present, found " + searchResults);
        }
    }

    public void currentPageIs(String value) {
        String current = paginatorCurrent.getText();
        if (!containsIgnoreCase(current, value)) {
            throw new IllegalStateException(value + " should be present, found " + current);
        }
    }
}
