/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-selenium-primefaces:src/test/java/selenium/support/Client.p.vm.java
 */
package com.jaxio.web.selenium.support;

import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static org.springframework.web.util.JavaScriptUtils.javaScriptEscape;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.palominolabs.xpath.XPathUtils;

public class Client {
    public final WebDriver webDriver;
    public final String baseUrl;

    private long driverWaitBeforeStopInSeconds = 10;
    private long waitAfterClickInMs = 250;
    private long waitAfterClearInMs = 250;
    private long waitAfterStepInMs = 4000;
    private long waitAfterFillMs = 250;
    private long waitAfterNotificationMs = 2000;
    private boolean followVisually;

    public Client(ClientBuilder builder) {
        this.webDriver = builder.webDriver;
        this.baseUrl = builder.baseUrl;
        this.followVisually = builder.followVisually;
        this.driverWaitBeforeStopInSeconds = builder.waitTimeInSeconds;
        initElements(builder.testInstance);
    }

    public void text(String text) {
        try {
            function(contains(text));
            success("Found [" + text + "]");
        } catch (RuntimeException e) {
            error("Could not find [" + text + "]");
        }
    }

    public void text(WebElement webElement, String text) {
        try {
            function(new TextEquals(webElement, text));
            success("Found [" + text + "]");
        } catch (RuntimeException e) {
            error("Could not find [" + text + "]");
        }
    }

    public void difference(WebElement webElement, String text) {
        try {
            function(new TextNotEquals(webElement, text));
            success("Found different text than [" + text + "]");
        } catch (RuntimeException e) {
            error("Could not find a text different to [" + text + "]");
        }
    }

    public void function(Function<WebDriver, Boolean> function) {
        browserWait().until(function);
    }

    public WebDriverWait browserWait() {
        return new WebDriverWait(webDriver, driverWaitBeforeStopInSeconds);
    }

    public static ExpectedCondition<Boolean> contains(final String text) {
        return new ExpectedCondition<Boolean>() {
            @Override
            public Boolean apply(WebDriver from) {
                return from.getPageSource().contains(text);
            }
        };
    }

    public void step(String text) {
        if (followVisually) {
            message(text);
            sleep(waitAfterStepInMs);
        }
    }

    public void message(String text) {
        notification(text, "info");
    }

    public void warning(String text) {
        notification(text, "warn");
    }

    public void error(String text) {
        if (followVisually) {
            notification(text, "error");
            sleep(60);
        }
        throw new RuntimeException(text);
    }

    public void success(String text) {
        notification(text, "succ_bg");
    }

    public void notification(String text, String type) {
        if (!followVisually) {
            return;
        }
        String notification = "growlNotificationBar.renderMessage({detail: '" + javaScriptEscape(text) + "', severity: '" + type + "'});";
        ((JavascriptExecutor) webDriver).executeScript(notification);
        sleep(waitAfterNotificationMs);
    }

    public void sleep(long sleepInMs) {
        try {
            MILLISECONDS.sleep(sleepInMs);
        } catch (InterruptedException ignore) {
        }
    }

    public void click(By by) {
        click(webDriver.findElement(by));
    }

    public void clickLinkTitle(String title) {
        String selector = "a[title=\"" + javaScriptEscape(title) + "\"]";
        click(By.cssSelector(selector));
    }

    public void click(WebElement webElement) {
        webElement.click();
        sleep(waitAfterClickInMs);
    }

    public void page(String relative) {
        System.out.println(baseUrl + relative);
        webDriver.get(baseUrl + relative);
    }

    public void clear(WebElement... webElements) {
        for (WebElement webElement : webElements) {
            webElement.clear();
            sleep(waitAfterClearInMs);
        }
    }

    public void fill(WebElement webElement, String text) {
        webElement.clear();
        webElement.sendKeys(text);
        sleep(waitAfterFillMs);
    }

    public void autocomplete(WebElement webElement, String text) {
        autocomplete(webElement, text, text);
    }

    public void autocomplete(WebElement webElement, String text, String match) {
        fill(webElement, text);
        click(webElement.findElement(By.xpath("//li[@data-item-label='" + XPathUtils.getXPathString(match) + "']")));
    }

    public void selectComboValue(WebElement webElement, String value) {
        new Select(webElement).selectByValue(value);
    }

    public void initElements(Object object) {
        try {
            Class<?> cls = object.getClass();
            do {
                for (Field field : cls.getDeclaredFields()) {
                    if (field.getType().isAnnotationPresent(Page.class)) {
                        field.setAccessible(true);
                        field.set(object, initPage(field));
                    }
                }
                cls = cls.getSuperclass();
            } while (cls != null);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private Object initPage(Field field) throws Exception {
        Object page = createPage(field);
        setupClient(page, page.getClass());
        return page;
    }

    private void setupClient(Object page, Class<?> clazz) throws Exception {
        for (Field field : clazz.getDeclaredFields()) {
            if (field.getType() == Client.class) {
                field.setAccessible(true);
                field.set(page, this);
            }
        }
        if (clazz.getSuperclass() != null) {
            setupClient(page, clazz.getSuperclass());
        }
    }

    private Object createPage(Field field) throws ClassNotFoundException {
        return PageFactory.initElements(webDriver, Class.forName(field.getType().getName()));
    }

    public void close() {
        webDriver.close();
    }

    public void takeScreenshot(String description) {
        if (followVisually) {
            try {
                File source = ((TakesScreenshot) webDriver).getScreenshotAs(OutputType.FILE);
                String extension = FilenameUtils.getExtension(source.getAbsolutePath());
                String date = DateFormatUtils.format(new Date(), "HH-mm-ss");
                String path = "./target/screenshots/" + date + "_" + description + "." + extension;
                FileUtils.copyFile(source, new File(path));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public static class ClientBuilder {
        WebDriver webDriver;
        int waitTimeInSeconds = 10;
        Object testInstance;
        String baseUrl;
        boolean followVisually = true;

        public static ClientBuilder newClient() {
            return new ClientBuilder();
        }

        public ClientBuilder waitTimeInSeconds(int waitTimeInSeconds) {
            this.waitTimeInSeconds = waitTimeInSeconds;
            return this;
        }

        public ClientBuilder baseUrl(String baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }

        public ClientBuilder onTest(Object testInstance) {
            this.testInstance = testInstance;
            return this;
        }

        public ClientBuilder followVisually(boolean followVisually) {
            this.followVisually = followVisually;
            return this;
        }

        public ClientBuilder webDriver(String driver) {
            if ("htmlunit".equalsIgnoreCase(driver)) {
                this.webDriver = new HtmlUnitDriver(true);
            } else if ("firefox".equalsIgnoreCase(driver)) {
                this.webDriver = new FirefoxDriver();
            } else if ("ie".equalsIgnoreCase(driver)) {
                this.webDriver = new InternetExplorerDriver();
            } else if ("chrome".equalsIgnoreCase(driver)) {
                this.webDriver = new ChromeDriver();
            } else {
                throw new IllegalArgumentException(driver + " is not a valid web driver");
            }
            webDriver.manage().timeouts().implicitlyWait(waitTimeInSeconds, TimeUnit.SECONDS);
            return this;
        }

        public Client build() {
            Preconditions.checkNotNull(baseUrl);
            Preconditions.checkNotNull(testInstance);
            Preconditions.checkNotNull(webDriver);
            return new Client(this);
        }
    }
}