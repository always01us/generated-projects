/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.jaxio.domain;

import java.io.*;
import java.util.*;

import static org.fest.assertions.Assertions.assertThat;
import org.junit.Test;

import com.jaxio.util.*;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.NotEmpty;
import com.jaxio.domain.Account;

/**
 * Basic tests for Document
 */
@SuppressWarnings("unused")
public class DocumentTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Document model = new Document();
        assertThat(model.isIdSet()).isFalse();
    }

    @Test
    public void isIdSetReturnsTrue() {
        Document model = new Document();
        model.setId(ValueGenerator.getUniqueString(36));
        assertThat(model.getId()).isNotNull();
        assertThat(model.isIdSet()).isTrue();
    }

    // test columns methods

    //-------------------------------------------------------------
    // Many to One:  Document.accountId ==> Account.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setAccount() {
        Document many = new Document();

        // init
        Account one = new Account();

        one.setId(ValueGenerator.getUniqueString(36));
        many.setAccount(one);

        // make sure it is propagated properly
        assertThat(many.getAccount()).isEqualTo(one);

        // now set it to back to null
        many.setAccount(null);

        // make sure null is propagated properly
        assertThat(many.getAccount()).isNull();
    }

    @Test
    public void toStringNotNull() {
        Document model = new Document();
        assertThat(model.toString()).isNotNull();
    }

    @Test
    public void equalsUsingPk() {
        Document model1 = new Document();
        Document model2 = new Document();

        String id = ValueGenerator.getUniqueString(36);
        model1.setId(id);
        model2.setId(id);

        model1.setDocumentContentType("a");
        model2.setDocumentContentType("a");

        model1.setDocumentSize(1);
        model2.setDocumentSize(1);

        model1.setDocumentFileName("a");
        model2.setDocumentFileName("a");

        model1.setDocumentBinary("d".getBytes());
        model2.setDocumentBinary("d".getBytes());

        model1.setVersion(1);
        model2.setVersion(1);
        assertThat(model1.isIdSet()).isTrue();
        assertThat(model2.isIdSet()).isTrue();
        assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
        assertThat(model1).isEqualTo(model2);
        assertThat(model2).isEqualTo(model1);
    }
}